using Models;
using Mysoft.Utility;
using Quartz;
using SqlSugar;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Mysoft.Task.TaskSet
{
    [DisallowConcurrentExecution]
    class ReviewSms : IJob
    {
        private static string connStr = SysConfig.SqlConnect;
        public void Execute(IJobExecutionContext context)
        {
            try
            {
                //获取任务执行参数,任务启动时会读取配置文件TaskConfig.xml节点TaskParam的值传递过来、、好像是空值
                //object objParam = context.JobDetail.JobDataMap.Get("TaskParam");
                
                //获取F_Id,F_MobileList，F_CreatorUserId
                List<SMC_SendSms> sendsms = GetSMCSendSmsList();
                int listcount = sendsms.Count();
                LogHelper.WriteLog("短信审核测试,当前系统时间:" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"+"取得"+ listcount + "条符合条件数据"));
            }
            catch (Exception ex)
            {
                JobExecutionException e2 = new JobExecutionException(ex);
                LogHelper.WriteLog("测试任务异常", ex);
                //1.立即重新执行任务 
                e2.RefireImmediately = true;
                //2 立即停止所有相关这个任务的触发器
                //e2.UnscheduleAllTriggers=true; 
            }
        }

        //1、关键字校验
        private string KeyCheck(string sms_content)
        {
            List<Sev_SendDateDetail> list_Sev_SendDateDetail = new List<Sev_SendDateDetail>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库连接
            {
                string sql = "select F_Id,F_SensitiveWords from Sev_SendDateDetail";//没有F_SensitiveWords字段在表内
                list_Sev_SendDateDetail = db.SqlQuery<Sev_SendDateDetail>(sql);
            }
            if (list_Sev_SendDateDetail.Count() > 0)
            {
                foreach (var model in list_Sev_SendDateDetail)
                {
                    string strmodel = model.ToString();
                    int modelnum = strmodel.Length;
                    string strstar = "";
                    for (int i = 0; i < modelnum; i++) {
                        strstar += "*";
                    }
                    sms_content.Replace(strmodel, strstar);
                }
            }
            return sms_content;
        }

        //2.审核条件检查
        private void Checked()
        {
            List<SMC_SendSms> baselist = GetSMCSendSmsList();//获取发送列表
            List<SMC_SendSms> ReadyToSendlist = new List<SMC_SendSms>();//符合审核条数，可以直接发送的列表
            foreach (var item in baselist)
            {
                //判断接收号码数量是否小于需审核的条数
                if (item.F_MobileCount < ReviewedNum(item.F_CreatorUserId))
                {
                    ReadyToSendlist.Add(item);
                    baselist.Remove(item);
                }
            }
            BlackCheckednum(ReadyToSendlist);//直接发送可以发送的list进行黑名单检查，直接准备发送.
            Autoconfirm( baselist);//baselist用于继续审核,自动审核
        }


        //3.自动审核,审核的是短信内容
        private void Autoconfirm(List<SMC_SendSms> baselist)//得到需要自动审核的SMC_SendSms列表
        {
            List<SMC_SendSms> Faliedlist = new List<SMC_SendSms>();//失败列表，即将进行人工审核
            foreach (var item in baselist)
            {
                if (AutoExamineTmpl(item.F_SmsContent) == false)
                {
                    Faliedlist.Add(item);
                    baselist.Remove(item);//移除审查不通过的行
                }
            }
            BlackCheckednum(baselist);//可发送的列表，进行黑名单检查，准备发送.
            Manualconfirm(Faliedlist);//审核失败的列表，进行人工审核。
        }

        //4.人工审核，审核内容是人工正则表达式
        private void Manualconfirm(List<SMC_SendSms>baselist)//获取自动审核未通过的列表;
        {
            foreach (var item in baselist)
            {
                if (ManualExamineTmpl("express表达式，待定", item.F_SmsContent) == false)//传入正则表达式，Content
                {
                    ChangeDealState(item.F_Id);//自动，人工审核验证均失败，修改审核状态为未审核。不做处理
                    baselist.Remove(item);//移除审核失败的行
                }
            }
            BlackCheckednum(baselist);//通过的进行黑名单检查，准备发送。
        }

        //5.管理员手动审核
        private void HandActuatedconfirm()
        {
            List<SMC_SendSms> AdminChenkedlist = GetAdminHandCheckedList();
            BlackCheckednum(AdminChenkedlist);//直接黑魔(名)法（单）检查，准备发送。 
        }

        //6.黑名单判断,获取可以发送的smslist，返回SendData的List<>.，为发送做最后的准备。
        private List<Sev_SendDateDetail> BlackCheckednum(List<SMC_SendSms>sendsmslist)
        {
            List<Models.TXL_BlackList> blacklist = GetBlackList();
            List<Sev_SendDateDetail> resultlist = new List<Sev_SendDateDetail>();
            foreach (var item in sendsmslist)
            {
                List<Sev_SendDateDetail> senddatalist = GetSendData(item.F_Id);
                foreach (var data in senddatalist)
                {
                    foreach (var num in blacklist)
                    {
                        if (data.F_PhoneCode == num.Mobile)//如果联系电话在黑名单中，移除行
                        {
                            senddatalist.Remove(data);
                            break;
                        }
                    }
                }
                resultlist.AddRange(senddatalist);//List拼接
            }
            return resultlist;
        }

//*************************************************************************审核方法***************************************************************************************
        //自动免审模板
        private bool AutoExamineTmpl(string content)
        {
            return true;
        }

        /// <summary>
        /// 人工免审模板，正则表达式匹配
        /// 快速验证一个字符串是否符合指定的正则表达式。
        /// </summary>
        /// <param name="express">正则表达式的内容。</param>
        /// <param name="content">需验证的字符串。</param>
        /// <returns>是否合法的bool值。</returns>
        private bool ManualExamineTmpl(string express, string content)
        {
            bool checkRegex = RegexHelper.CheckRegex(express, content);//CheckRegex方法：空值或者不符合正则表达式返回false;
            return checkRegex;
        }

//***********************************************************************获取，修改数据***********************************************************************************************
        //取得发送表数据，未审核(F_DealState=-1)，未发送
        private List<SMC_SendSms> GetSMCSendSmsList()
        {
            List<SMC_SendSms> list_smc_sendsms = new List<SMC_SendSms>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库连接
            {
                string sql = "select F_Id,F_MobileList,F_MobileCount,Is_Timer,F_SendSign,F_CreatorUserId from SMC_SendSms"
                    + " where F_DealState=-1 and F_SendState=0";
                list_smc_sendsms = db.SqlQuery<SMC_SendSms>(sql);//F_CreatorUserId是用户的F_Id
            }
            return list_smc_sendsms;
        }

        //取得管理员手动审核数据，或者是发送失败的数据。已审核，未发送
        private List<SMC_SendSms> GetAdminHandCheckedList()
        {
            List<SMC_SendSms> list_smc_sendsms = new List<SMC_SendSms>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))
            {
                string sql = "select F_Id,F_MobileList,F_MobileCount,Is_Timer,F_SendSign,F_CreatorUserId from SMC_SendSms"
                    + " where F_DealState=1 and F_SendState=0";
                list_smc_sendsms = db.SqlQuery<SMC_SendSms>(sql);
            }
            return list_smc_sendsms;
        }

        //取得黑名单列表
        private List<Models.TXL_BlackList> GetBlackList()
        {
            List<Models.TXL_BlackList> list_blacklist = new List<Models.TXL_BlackList>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库连接
            {
                string sql = "select Mobile from TXL_BlackList";
                list_blacklist = db.SqlQuery<Models.TXL_BlackList>(sql);
            }
            return list_blacklist;
        }

        //获取发送数据（号码）
        private List<Sev_SendDateDetail> GetSendData(string SMC_FId)
        {
            List<Sev_SendDateDetail> list_SendData = new List<Sev_SendDateDetail>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库连接
            {
                string sql = "select F_Id,F_PhoneCode,F_UserId from Sev_SendDateDetail where SMC_F_Id==@SMC_FId";//没有F_SensitiveWords字段在表内
                list_SendData = db.SqlQuery<Sev_SendDateDetail>(sql);
            }
            return list_SendData;
        }

        //获取审核条数
        private int ReviewedNum(string F_Id)
        {
            List<Models.OC_UserInfo> list = new List<Models.OC_UserInfo>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库链接
            {
                string sql = "select F_Reviewed from OC_UserInfo where F_UserFid==@F_Id";//获取F_Reviewed
                list = db.SqlQuery<Models.OC_UserInfo>(sql);
            }
            return list.ObjToInt();
        }

        //修改审核状态
        private void ChangeDealState(string F_Id)
        {
            using (SqlSugarClient db = new SqlSugarClient(connStr))
            {
                string sql = "update SMC_SendSms set F_DealState='0' where F_Id=@F_Id";
                db.Update(sql);
            }
        }
    }
}
