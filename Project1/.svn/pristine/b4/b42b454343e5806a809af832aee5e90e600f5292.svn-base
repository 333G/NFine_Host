using Models;
using Mysoft.Utility;
using Quartz;
using SqlSugar;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mysoft.Task.TaskSet
{
    [DisallowConcurrentExecution]
    class ReviewSms : IJob
    {
        private static string connStr = SysConfig.SqlConnect;
        public void Execute(IJobExecutionContext context)
        {
            try
            {
                //获取任务执行参数,任务启动时会读取配置文件TaskConfig.xml节点TaskParam的值传递过来、、好像是空值
                //object objParam = context.JobDetail.JobDataMap.Get("TaskParam");

                //获取F_Id,F_MobileList，F_CreatorUserId
                //List<SMC_SendSms> sendsms = GetSMCSendSmsList();
                //int listcount = sendsms.Count();
                int listCount = Checkedlist();
                OperateIsTime();//修改操作状态，如果到时间就是处理中。
                LogHelper.WriteLog("短信审核测试,当前系统时间:" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"+"操作了"+ listCount + "条符合条件数据"));
            }
            catch (Exception ex)
            {
                JobExecutionException e2 = new JobExecutionException(ex);
                LogHelper.WriteLog("任务异常 ", ex);
                //1.立即重新执行任务 
                e2.RefireImmediately = true;
                //2 立即停止所有相关这个任务的触发器
                //e2.UnscheduleAllTriggers=true; 
            }
        }

        //1、关键字校验
        private string KeyCheck(string sms_content)
        {
            List<Sev_SendDateDetail> list_Sev_SendDateDetail = new List<Sev_SendDateDetail>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库连接
            {
                string sql = "select F_Id,F_SensitiveWords from Sev_SendDateDetail";//没有F_SensitiveWords字段在表内
                list_Sev_SendDateDetail = db.SqlQuery<Sev_SendDateDetail>(sql);
            }
            if (list_Sev_SendDateDetail.Count() > 0)
            {
                foreach (var model in list_Sev_SendDateDetail)
                {
                    string strmodel = model.ToString();
                    int modelnum = strmodel.Length;
                    string strstar = "";
                    for (int i = 0; i < modelnum; i++) {
                        strstar += "*";
                    }
                    sms_content.Replace(strmodel, strstar);
                }
            }
            return sms_content;
        }

        //2.审核条件检查
        private int Checkedlist()
        {
            int Count = 0;
            List<SMC_SendSms> baselist = GetSMCSendSmsList();//获取发送列表
            foreach (var item in baselist)
            {
                //判断接收号码数量是否小于需审核的条数
                if (item.F_MobileCount < ReviewedNum(item.F_CreatorUserId))
                {
                    ChangeDealStateSucceed(item.F_Id);//修改审核状态为已审核
                    baselist.Remove(item);
                    Count++;
                }
            }
            Count += Autoconfirm(baselist);//baselist用于继续审核,自动审核
            return Count;//返回符合的数目
        }


        //3.自动审核,审核的是短信内容
        private int Autoconfirm(List<SMC_SendSms> baselist)//得到需要自动审核的SMC_SendSms列表
        {
            List<SMC_SendSms> Faliedlist = new List<SMC_SendSms>();//失败列表，即将进行人工审核
            int Count = 0;
            foreach (var item in baselist)
            {
                if (AutoExamineTmpl(item.F_RootId,item.F_SmsContent) == false)
                {
                    Faliedlist.Add(item);//未通过审核，添加到失败列表
                }
                else
                {
                    ChangeDealStateSucceed(item.F_Id);//修改审核状态为已审核
                    Count++;
                }
            }
            Count += Manualconfirm(Faliedlist);//审核失败的列表，进行人工审核。
            return Count;//返回符合的数目
        }

        //4.人工审核，审核内容是人工正则表达式
        private int Manualconfirm(List<SMC_SendSms>baselist)//获取自动审核未通过的列表;
        {
            int Count =0;
            foreach (var item in baselist)
            {
                if (ManualExamineTmpl(item.F_RootId, item.F_SmsContent) == false)//传入正则表达式，Content
                {
                    ChangeDealStateFalied(item.F_Id);//自动，人工审核验证均失败，修改审核状态为待审核（意思是等待管理员手动审核）。不做处理
                    baselist.Remove(item);//移除审核失败的行
                }
                else
                {
                    ChangeDealStateSucceed(item.F_Id);//修改审核状态为已审核
                    Count++;
                }
            }
            return Count;//返回符合的数目
        }

        //5.检测是否需要处理（isTime）,修改为处理中状态
        private void OperateIsTime()
        {
            List<SMC_SendSms> list = GetOperateSmsList();
            Parallel.ForEach(list, item =>
            {
                if (item.F_IsTimer)
                    ChangeOperateState(item.F_Id);
            });
        }

        ////6.黑名单判断,获取可以发送的smslist，返回SendData的List<>.，为发送做最后的准备。
        //private List<Sev_SendDateDetail> BlackCheckednum(List<SMC_SendSms>sendsmslist)
        //{
        //    List<Models.TXL_BlackList> blacklist = GetBlackList();
        //    List<Sev_SendDateDetail> resultlist = new List<Sev_SendDateDetail>();
        //    foreach (var item in sendsmslist)
        //    {
        //        List<Sev_SendDateDetail> senddatalist = GetSendData(item.F_Id);
        //        foreach (var data in senddatalist)
        //        {
        //            foreach (var num in blacklist)
        //            {
        //                if (data.F_PhoneCode == num.Mobile)//如果联系电话在黑名单中，移除行
        //                {
        //                    senddatalist.Remove(data);
        //                    break;
        //                }
        //            }
        //        }
        //        resultlist.AddRange(senddatalist);//List拼接
        //    }
        //    return resultlist;
        //}

//*************************************************************************审核方法***************************************************************************************
        //自动免审模板
        private bool AutoExamineTmpl(int F_RootId,string content)
        {
            bool Result = false;
            List<Models.OC_AutoExamineTmpl> AutoExamineTmplList = GetAutoExamineTmpl(F_RootId);
            foreach (var item in AutoExamineTmplList)
            {
                if (item.F_Analysis == content)//信息与拆分的模板进行比对，若符合一定条件（相似度》80%），通过。
                { Result = true; break; }

            }
            return Result;
        }

        /// <summary>
        /// 人工免审模板，正则表达式匹配
        /// 快速验证一个字符串是否符合指定的正则表达式。
        /// </summary>
        /// <param name="express">正则表达式的内容。</param>
        /// <param name="content">需验证的字符串。</param>
        /// <returns>是否合法的bool值。</returns>
        private bool ManualExamineTmpl(int F_RootId, string content)
        {
            bool Result = false;
            List<Models.OC_ManualExamineTmpl> list = GetManualExamineTmpl(F_RootId);
            foreach (var item in list)
            {
                if (item.F_Action == true)//动作为通过且符合正则，才能返回true来进行下一步动作。其余均不处理
                {
                    Result = RegexHelper.CheckRegex(item.F_RegexContent, content);//CheckRegex方法：空值或者不符合正则表达式返回false;
                    break;
                }

            }
            return Result;
        }

//***********************************************************************获取，修改数据***********************************************************************************************
        //取得发送表数据，未审核(F_DealState=0)，未发送，未处理
        private List<SMC_SendSms> GetSMCSendSmsList()
        {
            List<SMC_SendSms> list_smc_sendsms = new List<SMC_SendSms>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库连接
            {
                string sql = "select F_Id,F_MobileList,F_MobileCount,F_IsTimer,F_RootId,F_SendSign,F_CreatorUserId from SMC_SendSms"
                    + " where F_DealState=0 and F_SendState=0 and F_OperateState=0 ";
                list_smc_sendsms = db.SqlQuery<SMC_SendSms>(sql);//F_CreatorUserId是用户的F_Id
            }
            return list_smc_sendsms;
        }

        //取得发送表数据，已审核(F_DealState=9)，未发送，未处理
        private List<SMC_SendSms> GetOperateSmsList()
        {
            List<SMC_SendSms> list_smc_operasms = new List<SMC_SendSms>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库连接
            {
                string sql = "select F_Id,F_IsTimer,from SMC_SendSms"
                    + " where F_DealState=9 and F_SendState=0 and F_OperateState=0";
                list_smc_operasms = db.SqlQuery<SMC_SendSms>(sql);//F_CreatorUserId是用户的F_Id
            }
            return list_smc_operasms;
        }
        ////取得管理员手动审核数据，或者是发送失败的数据。已审核，未发送
        //private List<SMC_SendSms> GetAdminHandCheckedList()
        //{
        //    List<SMC_SendSms> list_smc_sendsms = new List<SMC_SendSms>();
        //    using (SqlSugarClient db = new SqlSugarClient(connStr))
        //    {
        //        string sql = "select F_Id,F_MobileList,F_MobileCount,F_IsTimer,F_SendSign,F_CreatorUserId from SMC_SendSms"
        //            + " where F_DealState=1 and F_SendState=0";
        //        list_smc_sendsms = db.SqlQuery<SMC_SendSms>(sql);
        //    }
        //    return list_smc_sendsms;
        //}

        //获取审核条数
        private int ReviewedNum(string F_Id)
        {
            List<Models.OC_UserInfo> list = new List<Models.OC_UserInfo>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))//开启数据库链接
            {
                string sql = "select F_Reviewed from OC_UserInfo where F_UserFid==@F_Id";//获取F_Reviewed
                list = db.SqlQuery<Models.OC_UserInfo>(sql);
            }
            return list.ObjToInt();
        }

        //修改审核状态为已审核
        private void ChangeDealStateSucceed(string F_Id)
        {
            using (SqlSugarClient db = new SqlSugarClient(connStr))
            {
                string sql = "update SMC_SendSms set F_DealState=9 where F_Id=@F_Id";
                db.Update(sql);
            }
        }

        //修改处理状态为处理中
        private void ChangeOperateState(string F_Id)
        {
            using (SqlSugarClient db = new SqlSugarClient(connStr))
            {
                string sql = "update SMC_SendSms set F_OperateState=1 where F_Id=@F_Id";
                db.Update(sql);
            }

        }

        //修改审核状态为待审核
        private void ChangeDealStateFalied(string F_Id)
        {
            using (SqlSugarClient db = new SqlSugarClient(connStr))
            {
                string sql = "update SMC_SendSms set F_DealState = -1 where F_Id = @F_Id";
                db.Update(sql);
            }
        }

        //获取用户的自动免审模板
        private List<Models.OC_AutoExamineTmpl> GetAutoExamineTmpl(int RootId)
        {
            List<Models.OC_AutoExamineTmpl> list = new List<Models.OC_AutoExamineTmpl>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))
            {
                string sql = "select F_Analysis from OC_AutoReviewTemplete where F_RootId==@RootId ";
                list = db.SqlQuery<Models.OC_AutoExamineTmpl>(sql);
            }
            return list;
        }

        //获取用户的人工免审模板
        private List<Models.OC_ManualExamineTmpl> GetManualExamineTmpl(int RootId)
        {
            List<Models.OC_ManualExamineTmpl> list = new List<Models.OC_ManualExamineTmpl>();
            using (SqlSugarClient db = new SqlSugarClient(connStr))
            {
                string sql = "select F_RegexContent,F_Action from OC_ManualExamineTmplete where F_RootId == @RootId";
                list = db.SqlQuery<Models.OC_ManualExamineTmpl>(sql);
            }
            return list;
        }
    }
}
